/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      blockMeshDict;
}

/*

2-mm mesh for Volvo Flygmotor AB bluff body simulation based on Cocks et al.

Nicholas Curtis - 04/06/2018

>>Overview of channel:


         15---------14
         /|        /|
     23-/>x       / x<-24  <- note not to scale, these must be in place such that we can
    22-/->x      /  x<-25     define a block for the back of the bluff-body (such
     11---|-----10  |           that we can label it a wall)
     /|  12----/|---13
    7-|--/----6 |  /                   (y)
   /| | /    /| | /                     |
  / | |/    / | |/                      |
 /  | 8----/--|-9----bluff-body         |
3---|-----2   |/       trailing edge    |
|   4-----|---5----bluff body           |_________(x)
|  /      |  /     leading-edge        /
26/       27/                         /
|/        |/                         /
0---------1                         /
   inlet                          (z)

Channel dimensions:
   Origin at vertex 0
   Bluff body is equilateral triangle w/ side length D=40mm
   width  = 2D, periodic
   height = 3D, walls


>>Side view:

   3--------------------------------------15
  /|                                     /|                (y)
 / 26       </|                         / |                 |
2--|-------//--------------------------14 |                 |
|  0------//---------------------------|--12       (z)______|
27/     <|/                            | /                  /
|/                                     |/                  /
1--------------------------------------13                 /
                                                        (x)
<------->|<---------------------------->
  0.1m   ^           0.682 m
         |
 bluff-body trailing edge
<------L_total------------------------->


Upstream of Bluff Body (y-z planar slice at x=0)

3----------------------7----11      ^
                       |<-D>|       |
                       |    17 ^    |
                       |  / |  |    |              (y)
26                     18   |  D   3D               |
                       |  \ |  |    |               |
                       |    16 v    |               |
                       |    |       |               |
0----------------------4----9       v    (z)________|
                       |    |
<---L_LE_upstream ---->|    |
                            |
<-----------0.1m----------->|
      L_TE_upstream


>>Isometric view of Bluff Body

     11                         10
   * |                        * |
 7   |                     6    |
 |   |                     |    |
 |   |                     |    |
 |  17---------------------|---20  ^
 |  /|                     |  / |  |
 |                         |    |  |
 |/  |                     |/   |  |            (y)
 |                         |    |  |             |
18---|--------------------21    |  D             |
 |                         |    |  |             |
 |\  |                     | \  |  |             |
 |                         |    |  |             |
 |  \|                     |   \|  |             |
 |  16---------------------|---19  v             |_____________(x)
 |   |<----------2D--------|--->|               /
 |   |                     |    |              /
 |   |                     |    |             /
 |   8                     |    9            /
 | *                       |  *            (z)
 4                         5


front view of back wall

  <----------2D---------->
15-----------------------14
 | ^                    ^ |
 | |                    | |
 | D                    D |
 | |                    | |
23 v                    v 24
 | ^                    ^ |
 | |                    | |
 | D                    D |
 | |                    | |                (y)
22 v                    v 25                |
 | ^                    ^ |                 |
 | |                    | |                 |
 | D                    D |                 |
 | |                    | |                 |
 | v                    v |                 |______________(x)
12 ----------------------13


Final Blocks:

______________________________________________________                    (y)
|             |                                       |                    |
|                2 |                 4                |                    |
|      0      |    *----------------------------------|                    |
|                *                                    |                    |
|-------------|* BB*                 5                |                    |
|                *                                    |                    |
|             |    *----------------------------------|     (z)____________|
|     1          3 |                 6                |
|_____________|_______________________________________|



This mesh is designed to be generated in two parts:

1) This file, blockMeshDict_base should be run through blockMesh to generate
   a basic mesh with the desired resolution

2) The resulting mesh should then be run through snappyHexMesh to refine near the
   walls & shear layers -- see file _________
*/

#include "meshDims"

vertices
(
    // inlet face
    (0          0                 0)            // vertex 0
    ($width     0                 0)            // vertex 1
    ($width     $height           0)            // vertex 2
    (0          $height           0)            // vertex 3
    // leading edge face
    (0          0                 #calc "-1 * $L_LE_upstream")  // vertex 4
    ($width     0                 #calc "-1 * $L_LE_upstream")  // vertex 5
    ($width     $height           #calc "-1 * $L_LE_upstream")  // vertex 6
    (0          $height           #calc "-1 * $L_LE_upstream")  // vertex 7
    // trailing edge face
    (0          0                 #calc "-1 * $L_TE_upstream")  // vertex 8
    ($width     0                 #calc "-1 * $L_TE_upstream")  // vertex 9
    ($width     $height           #calc "-1 * $L_TE_upstream")  // vertex 10
    (0          $height           #calc "-1 * $L_TE_upstream")  // vertex 11
    //outlet face
    (0          0                #calc "-1 * $L_total")     // vertex 12
    ($width     0                #calc "-1 * $L_total")     // vertex 13
    ($width     $height          #calc "-1 * $L_total")     // vertex 14
    (0          $height          #calc "-1 * $L_total")     // vertex 15
    //bluff body
    (0          $D               #calc "-1 * $L_TE_upstream")   //vertex 16
    (0          $two_D           #calc "-1 * $L_TE_upstream")   //vertex 17
    (0          $three_halves_D  #calc "-1 * $L_LE_upstream")   //vertex 18
    ($width     $D               #calc "-1 * $L_TE_upstream")   //vertex 19
    ($width     $two_D           #calc "-1 * $L_TE_upstream")   //vertex 20
    ($width     $three_halves_D  #calc "-1 * $L_LE_upstream")   //vertex 21
    // midpoints on back wall
    (0          $D               #calc "-1 * $L_total")   // vertex 22
    (0          $two_D           #calc "-1 * $L_total")   // vertex 23
    ($width     $two_D           #calc "-1 * $L_total")   // vertex 24
    ($width     $D               #calc "-1 * $L_total")   // vertex 25
    // midpoint on front wall
    (0          $three_halves_D  0)             // vertex 26
    ($width     $three_halves_D  0)             // vertex 27
);

// all edges are straight lines --> no edge object required
edges
(
);

blocks
(
    // block 0, inlet to BB-leading edge TOP
    //    --> for simplicity, we will always use the global coordinate system
    //    --> in order to be consistent & right-handed, first vertex is 4
    hex (18 21 6 7 26 27 2 3)
    // number of cells -> ceiling of number of cells required in each dimension to
    // meet mesh size
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y
        // transition to python script
        //#calc "(int)ceil($height / $mesh_size)"
        ${block_0_y_cells}
        //z
        //#calc "(int)ceil($L_LE_upstream / $mesh_size)"
        ${block_0_z_cells}
    )
    // refinement done in snappyHexMesh
    simpleGrading
    (
        1
        (
            ${block_0_y_grading}
        )
        (
            ${block_0_z_grading}
        )
    )

    // block 1, inlet to BB-leading edge BOTTOM
    //    --> for simplicity, we will always use the global coordinate system
    //    --> in order to be consistent & right-handed, first vertex is 4
    hex (4 5 21 18 0 1 27 26)
    // number of cells -> ceiling of number of cells required in each dimension to
    // meet mesh size
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y
        // transition to python script
        //#calc "(int)ceil($height / $mesh_size)"
        ${block_1_y_cells}
        //z
        //#calc "(int)ceil($L_LE_upstream / $mesh_size)"
        ${block_1_z_cells}
    )
    // refinement done in snappyHexMesh
    simpleGrading
    (
        1
        (
            ${block_1_y_grading}
        )
        (
            ${block_1_z_grading}
        )
    )

    // block 2 -> top of BB
    //    --> for this one block, we get slightly different results depending on
    //        whether we the starting vertex at an exact point (i.e., L_TE_upstream)
    //        or an calculated vertex (i.e., L_LE_upstream)
    //    --> When using the exact point, we get a grid resolution slightly < 2mm
    //    --> When using the calculated point, the resolution is slightly > 2mm
    //    --> hence, we use the exact point as a starting vertex, and no not use
    //        the global coordinate system, just for this one block
    hex (17 20 10 11 18 21 6 7)
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y -- //after checking -- it appears this is the short side
        //#calc "(int)ceil($D / $mesh_size)"
        ${block_2_y_cells}
        //z
        //#calc "(int)ceil($BB_height / $mesh_size)"
        ${block_2_z_cells}
    )
    edgeGrading
    (
        // first four edges are in x-direction, no grading
        1
        1
        1
        1
        //edge 4, from 17->11 in y
        (
            ${block_2_y_short_grading}
        )
        //edge 5, from 20->10 in y
        (
            ${block_2_y_short_grading}
        )
        //edge 6, from 21->6 in y
        (
            ${block_2_y_long_grading}
        )
        //edge 7, from 18->7 in y
        (
            ${block_2_y_long_grading}
        )
        //edges 8-11 are in z-direction, which has the same grading
        (
            ${block_2_z_grading}
        )
        (
            ${block_2_z_grading}
        )
        (
            ${block_2_z_grading}
        )
        (
            ${block_2_z_grading}
        )
    )

    // block 3 -> bottom of BB
    //    --> origin at 8
    hex (8 9 19 16 4 5 21 18)
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y -- //after checking -- it appears this is the short side
        //#calc "(int)ceil($D / $mesh_size)"
        ${block_3_y_cells}
        //z
        //#calc "(int)ceil($BB_height / $mesh_size)"
        ${block_3_z_cells}
    )
    edgeGrading
    (
       // first four edges are in x-direction, no grading
        1
        1
        1
        1
        //edge 4, from 8->16 in y
        (
            ${block_3_y_short_grading}
        )
        //edge 5, from 9->19 in y
        (
            ${block_3_y_short_grading}
        )
        //edge 6, from 4->18 in y
        (
            ${block_3_y_long_grading}
        )
        //edge 7, from 5->21 in y
        (
            ${block_3_y_long_grading}
        )
        //edges 8-11 are in z-direction, which has the same grading
        (
            ${block_3_z_grading}
        )
        (
            ${block_3_z_grading}
        )
        (
            ${block_3_z_grading}
        )
        (
            ${block_3_z_grading}
        )
    )

    // block 4 -- trailing edge of BB to outlet [top]
    hex (23 24 14 15 17 20 10 11)
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y
        //#calc "(int)ceil($D / $mesh_size)"
        ${block_4_y_cells}
        //z
        //#calc "(int)ceil($L_TE_downstream / $mesh_size)"
        ${block_4_z_cells}
    )
    simpleGrading (
        1
            (
                ${block_4_y_grading}
            )
            (
                ${block_4_z_grading}
            )
        )

    // block 5 -- trailing edge of BB to outlet [middle]
    hex (22 25 24 23 16 19 20 17)
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y
        //#calc "(int)ceil($D / $mesh_size)"
        ${block_5_y_cells}
        //z
        //#calc "(int)ceil($L_TE_downstream / $mesh_size)"
        ${block_5_z_cells}
    )
    simpleGrading (
        1
        (
            ${block_5_y_grading}
        )
        (
            ${block_5_z_grading}
        ))

    // block 6 -- trailing edge of BB to outlet [bottom]
    hex (12 13 25 22 8 9 19 16)
    (
        //x
        #calc "(int)ceil($width / $mesh_size)"
        //y
        //#calc "(int)ceil($D / $mesh_size)"
        ${block_6_y_cells}
        //z
        //#calc "(int)ceil($L_TE_downstream / $mesh_size)"
        ${block_6_z_cells}
    )
    simpleGrading (
        1
            (
                ${block_6_y_grading}
            )
            (
                ${block_6_z_grading}
            )
        )

);

// boundaries
boundary
(
    inlet
    {
        type patch;
        faces ((0 1 27 26)
               (26 27 2 3));
    }
    outlet
    {
        type patch;
        faces ((12 22 25 13)
               (22 23 24 25)
               (23 15 14 24));
    }
    left_wall
    {
        type symmetryPlane;
        // clock-wise traversal
        faces ((0 26 18 4)
               (26 3 7 18)
               (8 4 18 16)
               (17 18 7 11)
               (17 11 15 23)
               (16 17 23 22)
               (8 16 22 12));
    }
    right_wall
    {
        type symmetryPlane;
        // clock-wise traversal
        faces ((5 1 27 21)
               (21 27 2 6)
               (9 5 21 19)
               (20 21 6 10)
               (20 10 14 24)
               (19 20 24 25)
               (9 19 25 13));
    }
    top_wall
    {
        type wall;
        faces ((2 3 7 6)
               (6 7 11 10)
               (10 11 15 14));
    }
    bluff_body
    {
        type wall;
        faces ((17 20 21 18)
               (18 21 19 16)
               (17 16 19 20));
    }
    bottom_wall
    {
        type wall;
        faces ((4 5 1 0)
               (8 9 5 4)
               (12 13 9 8));
    }
);
