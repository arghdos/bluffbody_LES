Notes
-----

Mesh Creation
-------------

For both LES

>python buildMesh.py -c non-reacting/LES/ -m 2 -w 0.3 -g 1.1 -uy 1.1 -l 1.05 -uz 1.05

Which corresponds to a 2mm mesh, w/ wall spacing of 0.3mm.
The geometric expansion ratio in the y-direction is 1.15, while in the z-direction (downstream of the BB)
it is 1.05

This yields a mesh of 2365000 cells, which is slightly more than Cocks et al., but they
also did not include the full inlet


Initialization
--------------

We first initialize the solution using the "potential" solution.
After this, the solution is ignited using a two-step BFER Methane mechanism using the "RAS_twostep" case.
Once the flame becomes attached to the bluffbody and relatively well behaved, you may switch to the coarse
accelerint case to generate a realistic solution, as the RAS case here has far too little turbulence to be
used on it's own.
The coarse LES case should be run for around a single flow-through time (~0.05s) to allow
a the flame to fully develop.
Next the fine LES accelerint case ("LES_accelerint") can be initialized from
the coarse solution and run (we used about 0.1ms of simulated time). The times generated by the fine LES
accelerint case can be listed as:

>foamListTimes -processor

yielding a list like:

>5.099999999999999e-06
9.9e-06
1.440000000000001e-05
1.950000000000002e-05
2.430000000000002e-05
2.940000000000003e-05
3.090000000000003e-05
3.600000000000004e-05
4.080000000000005e-05
4.590000000000006e-05
4.740000000000006e-05
5.250000000000007e-05
5.730000000000008e-05
6.240000000000005e-05
6.360000000000003e-05
6.869999999999992e-05
7.379999999999982e-05
7.859999999999972e-05
8.369999999999961e-05
8.489999999999958e-05
8.999999999999948e-05
9.479999999999938e-05
9.989999999999927e-05
0.0001010999999999992
0.0001061999999999991
0.000110999999999999
0.0001160999999999989
0.0001175999999999989
0.0001226999999999988
0.000127499999999999
0.0001325999999999991
0.0001334999999999991
0.0001385999999999992
0.0001433999999999993
0.0001484999999999995
0.0001505999999999995
0.0001556999999999996
0.0001604999999999997
0.0001655999999999999
0.0001670999999999999
0.0001722
0.0001770000000000001
0.0001821000000000003
0.0001836000000000003
0.0001887000000000004
0.0001935000000000005
0.0001986000000000007
0.0001995000000000007
0.0002046000000000008
0.0002097000000000009
0.000214500000000001
0.0002196000000000011
0.0002244000000000013
0.0002295000000000014
0.0002307000000000014
0.0002358000000000015
0.0002406000000000016
0.0002457000000000017
0.0002463000000000018
0.0002514000000000019
0.0002562000000000021
0.0002613000000000022
0.0002625000000000022
0.0002676000000000023
0.0002724000000000024
0.0002775000000000026
0.0002781000000000026
0.0002832000000000027
0.0002880000000000028
0.000293100000000003
0.000294600000000003
0.0002997000000000031
0.0003045000000000032
0.0003096000000000034
0.0003108000000000034
0.0003159000000000035
0.0003210000000000036
0.0003258000000000037
0.0003309000000000039
0.0003318000000000039
0.000336900000000004
0.0003417000000000041
0.0003468000000000043
0.0003477000000000043
0.0003528000000000044
0.0003576000000000045
0.0003627000000000046
0.0003639000000000047
0.0003690000000000048
0.000373800000000005
0.0003789000000000051
0.0003795000000000051
0.0003846000000000052
0.0003894000000000053
0.0003945000000000055
0.0003954000000000055
0.0004005000000000056
0.0004053000000000057
0.0004104000000000059
0.0004110000000000059
0.000416100000000006
0.0004209000000000062
0.0004260000000000063
0.0004266000000000063
0.0004317000000000064
0.0004365000000000065
0.0004416000000000067
0.0004428000000000067
0.0004479000000000068
0.0004527000000000069
0.0004578000000000071
0.0004584000000000071
0.0004635000000000072
0.0004683000000000073
0.0004734000000000074
0.0004746000000000075
0.0004797000000000076
0.0004848000000000077
0.0004896000000000076
0.0004947000000000068
0.0004953000000000067
0.0005004000000000059
0.0005052000000000051
0.0005103000000000043
0.0005118000000000041
0.0005169000000000033
0.0005217000000000025
0.0005268000000000017
0.0005280000000000016
0.0005331000000000008
0.0005379
0.0005429999999999992
0.000544499999999999
0.0005495999999999982
0.0005543999999999974
0.0005594999999999966
0.0005645999999999958
0.0005693999999999951
0.0005744999999999943
0.0005759999999999941
0.0005810999999999933
0.0005858999999999925
0.0005909999999999917
0.0005927999999999914


This list is then filtered using a simple python script:
    times = [...]
    start_time = times[0]
    end_time = times[-1]
    n_samples = 30
    duration = (end_time - start_time) / n_samples
    out_times = []
    for time in times:
        if time >= start_time + duration:
            out_times.append(time)
            start_time = time

    if end_time not in out_times:
        out_times.append(end_time)

    print("\n".join([str(x) for x in out_times]))
    print("reconstructPar -time \"{}\"".format(
          ",".join([str(x) for x in out_times])))

to select 30 ~equally spaced times:
>5.099999999999999e-06
2.430000000000002e-05
4.590000000000006e-05
6.869999999999992e-05
8.999999999999948e-05
0.000110999999999999
0.0001325999999999991
0.0001556999999999996
0.0001770000000000001
0.0001836000000000003
0.0002097
0.0002358
0.0002613
0.000288
0.0003159
0.0003417
0.000369
0.0003945
0.0004209
0.0004317
0.0004527
0.0004734
0.0004896
0.0005103
0.0005268
0.000543
0.0005595
0.000576
0.0005928

These are then saved under the file "times" in the LES folder, and will be used as a
database of times to run for the base OpenFOAM solver (the "LES" case)
